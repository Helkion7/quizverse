<%- include('../partials/header') %>

<div class="container">
  <div class="admin-header">
    <h1>Admin Dashboard</h1>
    <div id="errorContainer" class="error-container fade-in"></div>
  </div>

  <div class="admin-card">
    <div class="card-header">
      <h2>User Management</h2>
      <div class="search-container focus-container">
        <input
          type="text"
          placeholder="Search users..."
          id="searchInput"
          class="search-input"
        />
        <button type="button" id="searchButton" class="btn">Search</button>
      </div>
    </div>

    <div class="table-container">
      <table class="admin-table">
        <thead>
          <tr>
            <th>Username</th>
            <th>Email</th>
            <th>Role</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="usersTableBody">
          <!-- User data will be loaded here -->
        </tbody>
      </table>

      <div id="loadingIndicator" class="loading-indicator">
        <div class="loader"></div>
        <span>Loading...</span>
      </div>

      <div id="noResults" class="no-results hidden">
        No users found matching your search.
      </div>

      <ul id="pagination" class="pagination"></ul>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal hidden">
  <div class="modal-content slide-in">
    <div class="modal-header">
      <h3>Confirm Deletion</h3>
      <button type="button" class="modal-close" id="closeModal">&times;</button>
    </div>
    <div class="modal-body">
      <p>
        Are you sure you want to delete the user
        <span id="deleteUserName" class="accent-text"></span>?
      </p>
      <p>This action cannot be undone.</p>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn" id="cancelDelete">Cancel</button>
      <button type="button" class="btn btn-danger" id="confirmDelete">
        Delete
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    let currentPage = 1;
    let searchTerm = "";
    const limit = 10;
    let userToDelete = null;
    const modal = document.getElementById("deleteModal");
    const errorContainer = document.getElementById("errorContainer");

    // Initial load
    loadUsers();

    // Search functionality
    document
      .getElementById("searchButton")
      .addEventListener("click", function () {
        searchTerm = document.getElementById("searchInput").value.trim();
        currentPage = 1;
        loadUsers();
      });

    document
      .getElementById("searchInput")
      .addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          searchTerm = document.getElementById("searchInput").value.trim();
          currentPage = 1;
          loadUsers();
        }
      });

    // Modal control
    document.getElementById("closeModal").addEventListener("click", closeModal);
    document
      .getElementById("cancelDelete")
      .addEventListener("click", closeModal);

    // Delete user functionality
    document
      .getElementById("confirmDelete")
      .addEventListener("click", function () {
        if (userToDelete) {
          deleteUser(userToDelete);
        }
      });

    function closeModal() {
      modal.classList.add("hidden");
    }

    // Function to load users
    function loadUsers() {
      showLoading(true);
      clearError();

      fetch(
        `/admin/users?page=${currentPage}&limit=${limit}&search=${searchTerm}`
      )
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          renderUsers(data.users);
          renderPagination(data.pagination);
          showLoading(false);
        })
        .catch((error) => {
          console.error("Error loading users:", error);
          showLoading(false);
          showError("Failed to load users. Please try again.");
        });
    }

    // Function to render users in the table
    function renderUsers(users) {
      const tableBody = document.getElementById("usersTableBody");
      const noResults = document.getElementById("noResults");
      tableBody.innerHTML = "";

      if (users.length === 0) {
        noResults.classList.remove("hidden");
        return;
      }

      noResults.classList.add("hidden");

      users.forEach((user) => {
        const row = document.createElement("tr");
        const createdDate = new Date(user.createdAt);
        const formattedDate = createdDate.toLocaleDateString();

        row.innerHTML = `
          <td>${user.username}</td>
          <td>${user.email}</td>
          <td><span class="badge">${user.role}</span></td>
          <td>${formattedDate}</td>
          <td>
            <button class="btn delete-btn" data-id="${user._id}" data-username="${user.username}">Delete</button>
          </td>
        `;

        tableBody.appendChild(row);
      });

      // Add event listeners to delete buttons
      document.querySelectorAll(".delete-btn").forEach((button) => {
        button.addEventListener("click", function () {
          const userId = this.getAttribute("data-id");
          const username = this.getAttribute("data-username");

          userToDelete = userId;
          document.getElementById("deleteUserName").textContent = username;
          modal.classList.remove("hidden");
        });
      });
    }

    // Function to render pagination
    function renderPagination(pagination) {
      const paginationElement = document.getElementById("pagination");
      paginationElement.innerHTML = "";

      if (pagination.totalPages <= 1) return;

      // Previous button
      if (pagination.hasPrev) {
        addPaginationButton(
          paginationElement,
          pagination.currentPage - 1,
          "Previous"
        );
      }

      // Page numbers
      const totalVisiblePages = 5;
      let startPage = Math.max(
        1,
        pagination.currentPage - Math.floor(totalVisiblePages / 2)
      );
      let endPage = Math.min(
        pagination.totalPages,
        startPage + totalVisiblePages - 1
      );

      if (endPage - startPage < totalVisiblePages - 1) {
        startPage = Math.max(1, endPage - totalVisiblePages + 1);
      }

      for (let i = startPage; i <= endPage; i++) {
        const isActive = i === pagination.currentPage;
        addPaginationButton(paginationElement, i, i.toString(), isActive);
      }

      // Next button
      if (pagination.hasNext) {
        addPaginationButton(
          paginationElement,
          pagination.currentPage + 1,
          "Next"
        );
      }
    }

    function addPaginationButton(parent, page, text, isActive = false) {
      const li = document.createElement("li");
      li.classList.add("page-item");
      if (isActive) li.classList.add("active");

      const a = document.createElement("a");
      a.textContent = text;
      a.setAttribute("data-page", page);
      a.addEventListener("click", function (e) {
        e.preventDefault();
        currentPage = parseInt(this.getAttribute("data-page"));
        loadUsers();
      });

      li.appendChild(a);
      parent.appendChild(li);
    }

    // Function to delete a user
    function deleteUser(userId) {
      clearError();

      fetch(`/admin/users/${userId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => {
          if (!response.ok) {
            return response.json().then((data) => {
              throw new Error(data.error || "Failed to delete user");
            });
          }
          return response.json();
        })
        .then((data) => {
          if (data.success) {
            closeModal();
            loadUsers();
            showNotification("User deleted successfully");
          } else {
            throw new Error(data.error || "Failed to delete user");
          }
        })
        .catch((error) => {
          console.error("Error deleting user:", error);
          closeModal();
          showError(
            error.message || "An error occurred while deleting the user"
          );
        });
    }

    // Helper functions
    function showLoading(show) {
      const loadingIndicator = document.getElementById("loadingIndicator");
      if (show) {
        loadingIndicator.classList.remove("hidden");
      } else {
        loadingIndicator.classList.add("hidden");
      }
    }

    function showError(message) {
      errorContainer.textContent = message;
      errorContainer.classList.add("visible");
      errorContainer.classList.add("error");

      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        clearError();
      }, 5000);
    }

    function showNotification(message) {
      errorContainer.textContent = message;
      errorContainer.classList.add("visible");
      errorContainer.classList.add("success");

      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        clearError();
      }, 5000);
    }

    function clearError() {
      errorContainer.textContent = "";
      errorContainer.classList.remove("visible");
      errorContainer.classList.remove("error");
      errorContainer.classList.remove("success");
    }
  });
</script>

<%- include('../partials/footer') %>
