<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/quiz-create.css" />
  </head>
  <body>
    <%- include('../partials/header') %>

    <div class="container">
      <div class="card">
        <h1>Create a Quiz</h1>

        <form action="/quiz/create" method="POST" id="quizForm">
          <div class="form-group">
            <label for="title" class="form-label">Quiz Title</label>
            <input
              type="text"
              id="title"
              name="title"
              class="form-control"
              required
            />
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Description</label>
            <textarea
              id="description"
              name="description"
              class="form-control"
              rows="3"
            ></textarea>
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Category</label>
            <select id="category" name="category" class="form-control" required>
              <option value="">Select a category</option>
              <% if (categories && categories.length > 0) { %> <%
              categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
              <% }); %> <% } else { %>
              <option value="programming">Programming</option>
              <option value="networking">Networking</option>
              <option value="databases">Databases</option>
              <option value="cybersecurity">Cybersecurity</option>
              <option value="web-development">Web Development</option>
              <option value="other">Other</option>
              <% } %>
            </select>
          </div>

          <div class="form-group">
            <label for="tags" class="form-label">Tags</label>
            <div class="tags-input-container">
              <input
                type="text"
                id="tags-input"
                placeholder="Add tags separated by commas"
                class="form-control"
              />
              <input type="hidden" id="tags" name="tags" />
            </div>
            <div class="tags-container"></div>

            <% if (popularTags && popularTags.length > 0) { %>
            <div class="tag-suggestions">
              <p class="suggestion-label">Popular tags:</p>
              <div class="suggestions-container">
                <% popularTags.forEach(tag => { %>
                <span class="suggestion-tag" data-tag="<%= tag %>"
                  ><%= tag %></span
                >
                <% }); %>
              </div>
            </div>
            <% } %>
          </div>

          <div class="form-group">
            <label class="form-label">Visibility</label>
            <div>
              <input
                type="radio"
                name="isPublic"
                id="radio-public"
                value="true"
                checked
              />
              <label for="radio-public">Public</label>

              <input
                type="radio"
                name="isPublic"
                id="radio-private"
                value="false"
              />
              <label for="radio-private">Private</label>
            </div>
          </div>

          <!-- Questions Section -->
          <div class="form-group">
            <h2>Questions</h2>
            <div id="questions-container"></div>
            <button type="button" id="add-question" class="btn">
              Add Question
            </button>
          </div>

          <input type="hidden" name="questions" id="questions-data" />

          <div class="form-group">
            <button type="submit" class="btn btn-primary">Create Quiz</button>
            <a href="/user/dashboard" class="btn">Back to Dashboard</a>
          </div>
        </form>
      </div>
    </div>

    <!-- Question Template -->
    <template id="question-template">
      <div class="question-container">
        <div class="form-group">
          <label class="form-label">Question Text</label>
          <input type="text" class="form-control question-text" required />
        </div>

        <div class="form-group">
          <label class="form-label">Question Type</label>
          <select class="form-control question-type">
            <option value="multiple-choice">Multiple Choice</option>
            <option value="true-false">True/False</option>
            <option value="short-answer">Short Answer</option>
            <option value="matching">Matching</option>
            <option value="ordering">Ordering</option>
            <option value="fill-in-blanks">Fill in the Blanks</option>
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">Points</label>
          <input
            type="number"
            class="form-control question-points"
            value="10"
            min="1"
            max="100"
          />
        </div>

        <!-- Multiple Choice Options -->
        <div class="form-group multiple-choice-options">
          <label class="form-label">Options</label>
          <div class="options-container"></div>
          <button type="button" class="btn add-option">Add Option</button>
        </div>

        <!-- True/False Options -->
        <div class="form-group true-false-options hidden">
          <label>
            <input type="radio" name="true-false-QUESTIONID" value="true" />
            True
          </label>
          <label>
            <input type="radio" name="true-false-QUESTIONID" value="false" />
            False
          </label>
        </div>

        <!-- Short Answer Option -->
        <div class="form-group short-answer-option hidden">
          <label class="form-label">Correct Answer</label>
          <input type="text" class="form-control correct-answer" />
        </div>

        <!-- Matching Options -->
        <div class="form-group matching-options hidden">
          <label class="form-label">Matching Pairs</label>
          <div class="matching-container"></div>
          <button type="button" class="btn add-matching-pair">
            Add Matching Pair
          </button>
        </div>

        <!-- Ordering Options -->
        <div class="form-group ordering-options hidden">
          <label class="form-label">Ordered Items</label>
          <div class="ordering-container"></div>
          <button type="button" class="btn add-ordering-item">Add Item</button>
        </div>

        <!-- Fill in the Blanks Options -->
        <div class="form-group fill-in-blanks-options hidden">
          <label class="form-label">Blank Answers</label>
          <p class="blank-instruction">
            Enter the correct answer for each blank in your question. Use
            {blank1}, {blank2}, etc. in your question text.
          </p>
          <div class="blanks-container"></div>
          <button type="button" class="btn add-blank">Add Blank</button>
        </div>

        <button type="button" class="btn remove-question">
          Remove Question
        </button>
      </div>
    </template>

    <!-- Option Template -->
    <template id="option-template">
      <div class="option-row">
        <input
          type="text"
          class="form-control option-text"
          placeholder="Option text"
        />
        <div class="form-group">
          <input
            type="checkbox"
            class="option-correct"
            id="option-correct-ID"
          />
          <label for="option-correct-ID">Correct</label>
        </div>
        <button type="button" class="btn remove-option">Remove</button>
      </div>
    </template>

    <!-- Matching Pair Template -->
    <template id="matching-pair-template">
      <div class="matching-pair">
        <input
          type="text"
          class="form-control matching-item"
          placeholder="Item to match"
        />
        <span class="matching-arrow">→</span>
        <input
          type="text"
          class="form-control matching-match"
          placeholder="Match to this"
        />
        <button type="button" class="btn remove-matching-pair">Remove</button>
      </div>
    </template>

    <!-- Ordering Item Template -->
    <template id="ordering-item-template">
      <div class="ordering-item">
        <input
          type="number"
          class="form-control ordering-position"
          placeholder="#"
          min="1"
        />
        <input
          type="text"
          class="form-control ordering-text"
          placeholder="Item text"
        />
        <button type="button" class="btn remove-ordering-item">Remove</button>
      </div>
    </template>

    <!-- Blank Answer Template -->
    <template id="blank-template">
      <div class="blank-item">
        <span class="blank-number"></span>
        <input
          type="text"
          class="form-control blank-answer"
          placeholder="Correct answer for this blank"
        />
        <button type="button" class="btn remove-blank">Remove</button>
      </div>
    </template>

    <script>
      // Initialize variables
      let questionCounter = 0;
      let tags = [];

      // DOM elements
      const questionsContainer = document.getElementById("questions-container");
      const addQuestionBtn = document.getElementById("add-question");
      const questionsDataInput = document.getElementById("questions-data");
      const quizForm = document.getElementById("quizForm");
      const tagsInput = document.getElementById("tags-input");
      const tagsContainer = document.querySelector(".tags-container");
      const tagsHiddenInput = document.getElementById("tags");

      // ensure question template isn’t undefined
      const questionTemplate = document.getElementById("question-template");

      // register other templates and log if missing
      const optionTemplate = document.getElementById("option-template");
      if (!optionTemplate) console.error("option-template element not found!");
      const matchingPairTemplate = document.getElementById(
        "matching-pair-template"
      );
      if (!matchingPairTemplate)
        console.error("matching-pair-template element not found!");
      const orderingItemTemplate = document.getElementById(
        "ordering-item-template"
      );
      if (!orderingItemTemplate)
        console.error("ordering-item-template element not found!");
      const blankTemplate = document.getElementById("blank-template");
      if (!blankTemplate) console.error("blank-template element not found!");

      // Add tag handling
      tagsInput.addEventListener("keydown", function (e) {
        if (e.key === "Enter" || e.key === ",") {
          e.preventDefault();
          addTag(this.value.trim());
          this.value = "";
        }
      });

      tagsInput.addEventListener("blur", function () {
        if (this.value.trim() !== "") {
          addTag(this.value.trim());
          this.value = "";
        }
      });

      // Add click handlers for tag suggestions
      document.querySelectorAll(".suggestion-tag").forEach((tag) => {
        tag.addEventListener("click", function () {
          addTag(this.dataset.tag);
        });
      });

      function addTag(tagText) {
        if (!tagText) return;

        // Remove any commas and trim whitespace
        tagText = tagText.replace(/,/g, "").trim().toLowerCase();

        // Don't add if empty or already exists
        if (tagText === "" || tags.includes(tagText)) return;

        // Add tag to array
        tags.push(tagText);

        // Update hidden input
        tagsHiddenInput.value = tags.join(",");

        // Create visual tag element
        const tagElement = document.createElement("span");
        tagElement.classList.add("tag-item");
        tagElement.innerHTML = `
          ${tagText}
          <span class="remove-tag" data-tag="${tagText}">&times;</span>
        `;

        tagsContainer.appendChild(tagElement);

        // Add remove event listener
        tagElement
          .querySelector(".remove-tag")
          .addEventListener("click", function () {
            removeTag(this.dataset.tag);
          });
      }

      function removeTag(tagText) {
        // Remove from array
        tags = tags.filter((tag) => tag !== tagText);

        // Update hidden input
        tagsHiddenInput.value = tags.join(",");

        // Remove visual element
        const tagElement = document.querySelector(
          `.remove-tag[data-tag="${tagText}"]`
        ).parentNode;
        tagElement.remove();
      }

      // Add question handler
      addQuestionBtn.addEventListener("click", addQuestion);

      // Submit form handler
      quizForm.addEventListener("submit", prepareFormData);

      // Add first question automatically
      addQuestion();

      function addQuestion() {
        const questionId = questionCounter++;
        const questionNode = document.importNode(
          questionTemplate.content,
          true
        );

        // Set unique IDs for true/false radio buttons
        const radioButtons = questionNode.querySelectorAll(
          'input[type="radio"]'
        );
        radioButtons.forEach((radio) => {
          radio.name = radio.name.replace("QUESTIONID", questionId);
        });

        // Add event listeners
        const questionType = questionNode.querySelector(".question-type");
        questionType.addEventListener("change", function () {
          toggleQuestionType(this);
        });

        // Add specific option handlers for each question type

        // Multiple choice
        const addOptionBtn = questionNode.querySelector(".add-option");
        addOptionBtn.addEventListener("click", function () {
          addOption(
            this.closest(".question-container").querySelector(
              ".options-container"
            )
          );
        });

        // Matching
        const addMatchingPairBtn =
          questionNode.querySelector(".add-matching-pair");
        addMatchingPairBtn.addEventListener("click", function () {
          addMatchingPair(
            this.closest(".question-container").querySelector(
              ".matching-container"
            )
          );
        });

        // Ordering
        const addOrderingItemBtn =
          questionNode.querySelector(".add-ordering-item");
        addOrderingItemBtn.addEventListener("click", function () {
          addOrderingItem(
            this.closest(".question-container").querySelector(
              ".ordering-container"
            )
          );
        });

        // Fill in the blanks
        const addBlankBtn = questionNode.querySelector(".add-blank");
        addBlankBtn.addEventListener("click", function () {
          addBlank(
            this.closest(".question-container").querySelector(
              ".blanks-container"
            )
          );
        });

        const removeQuestionBtn =
          questionNode.querySelector(".remove-question");
        removeQuestionBtn.addEventListener("click", function () {
          this.closest(".question-container").remove();
        });

        // Add first option for multiple choice
        const optionsContainer =
          questionNode.querySelector(".options-container");
        addOption(optionsContainer);

        // Append to container
        questionsContainer.appendChild(questionNode);
      }

      function addOption(container) {
        console.log("addOption called, optionTemplate =", optionTemplate);
        if (!optionTemplate) {
          console.error("Cannot add option: optionTemplate is undefined");
          return;
        }
        try {
          const optionNode = document.importNode(optionTemplate.content, true);

          // assign a unique id to the checkbox and update its label's for-attribute
          const checkbox = optionNode.querySelector(".option-correct");
          const label = optionNode.querySelector(
            'label[for="option-correct-ID"]'
          );
          const uniqueId = `option-correct-${Date.now()}-${Math.random()
            .toString(36)
            .substr(2, 9)}`;
          checkbox.id = uniqueId;
          if (label) label.setAttribute("for", uniqueId);

          // remove-option handler
          const removeBtn = optionNode.querySelector(".remove-option");
          removeBtn.addEventListener("click", function () {
            this.closest(".option-row").remove();
          });

          container.appendChild(optionNode);
        } catch (e) {
          console.error("Error in addOption:", e);
        }
      }

      function addMatchingPair(container) {
        const pairNode = document.importNode(
          matchingPairTemplate.content,
          true
        );

        // Add event listener to remove button
        const removeBtn = pairNode.querySelector(".remove-matching-pair");
        removeBtn.addEventListener("click", function () {
          this.closest(".matching-pair").remove();
        });

        container.appendChild(pairNode);
      }

      function addOrderingItem(container) {
        const itemNode = document.importNode(
          orderingItemTemplate.content,
          true
        );

        // Set the position number based on existing items
        const position = container.children.length + 1;
        itemNode.querySelector(".ordering-position").value = position;

        // Add event listener to remove button
        const removeBtn = itemNode.querySelector(".remove-ordering-item");
        removeBtn.addEventListener("click", function () {
          this.closest(".ordering-item").remove();

          // Update position numbers for remaining items
          const items = container.querySelectorAll(".ordering-item");
          items.forEach((item, index) => {
            item.querySelector(".ordering-position").value = index + 1;
          });
        });

        container.appendChild(itemNode);
      }

      function addBlank(container) {
        const blankNode = document.importNode(blankTemplate.content, true);

        // Set the blank number based on existing blanks
        const blankNum = container.children.length + 1;
        blankNode.querySelector(
          ".blank-number"
        ).textContent = `Blank ${blankNum}: `;

        // Add event listener to remove button
        const removeBtn = blankNode.querySelector(".remove-blank");
        removeBtn.addEventListener("click", function () {
          this.closest(".blank-item").remove();

          // Update blank numbers for remaining blanks
          const blanks = container.querySelectorAll(".blank-item");
          blanks.forEach((blank, index) => {
            blank.querySelector(".blank-number").textContent = `Blank ${
              index + 1
            }: `;
          });
        });

        container.appendChild(blankNode);
      }

      function toggleQuestionType(select) {
        const questionContainer = select.closest(".question-container");
        const multipleChoiceOptions = questionContainer.querySelector(
          ".multiple-choice-options"
        );
        const trueFalseOptions = questionContainer.querySelector(
          ".true-false-options"
        );
        const shortAnswerOption = questionContainer.querySelector(
          ".short-answer-option"
        );
        const matchingOptions =
          questionContainer.querySelector(".matching-options");
        const orderingOptions =
          questionContainer.querySelector(".ordering-options");
        const fillInBlanksOptions = questionContainer.querySelector(
          ".fill-in-blanks-options"
        );

        // Hide all
        multipleChoiceOptions.classList.add("hidden");
        trueFalseOptions.classList.add("hidden");
        shortAnswerOption.classList.add("hidden");
        matchingOptions.classList.add("hidden");
        orderingOptions.classList.add("hidden");
        fillInBlanksOptions.classList.add("hidden");

        // Show selected
        switch (select.value) {
          case "multiple-choice":
            multipleChoiceOptions.classList.remove("hidden");
            break;
          case "true-false":
            trueFalseOptions.classList.remove("hidden");
            break;
          case "short-answer":
            shortAnswerOption.classList.remove("hidden");
            break;
          case "matching":
            matchingOptions.classList.remove("hidden");
            const matchingContainer = questionContainer.querySelector(
              ".matching-container"
            );
            break;
          case "ordering":
            orderingOptions.classList.remove("hidden");
            break;
          case "fill-in-blanks":
            fillInBlanksOptions.classList.remove("hidden");
            break;
        }
      }

      function prepareFormData(event) {
        event.preventDefault();

        const questions = [];
        const questionContainers = questionsContainer.querySelectorAll(
          ".question-container"
        );

        questionContainers.forEach((container) => {
          const questionText = container.querySelector(".question-text").value;
          const questionType = container.querySelector(".question-type").value;
          const questionPoints =
            container.querySelector(".question-points").value;

          const questionData = {
            text: questionText,
            type: questionType,
            points: questionPoints,
          };

          switch (questionType) {
            case "multiple-choice":
              const options = [];
              const optionRows = container.querySelectorAll(".option-row");
              optionRows.forEach((row) => {
                const optionText = row.querySelector(".option-text").value;
                const isCorrect = row.querySelector(".option-correct").checked;
                options.push({ text: optionText, correct: isCorrect });
              });
              questionData.options = options;
              break;
            case "true-false":
              const trueFalseValue = container.querySelector(
                'input[name^="true-false"]:checked'
              )?.value;
              questionData.correctAnswer = trueFalseValue;
              break;
            case "short-answer":
              const correctAnswer =
                container.querySelector(".correct-answer").value;
              questionData.correctAnswer = correctAnswer;
              break;
            case "matching":
              const pairs = [];
              const matchingPairs =
                container.querySelectorAll(".matching-pair");
              matchingPairs.forEach((pair) => {
                const item = pair.querySelector(".matching-item").value;
                const match = pair.querySelector(".matching-match").value;
                pairs.push({ item, match });
              });
              questionData.pairs = pairs;
              break;
            case "ordering":
              const items = [];
              const orderingItems =
                container.querySelectorAll(".ordering-item");
              orderingItems.forEach((item) => {
                const position = item.querySelector(".ordering-position").value;
                const text = item.querySelector(".ordering-text").value;
                items.push({ position, text });
              });
              questionData.items = items;
              break;
            case "fill-in-blanks":
              const blanks = [];
              const blankItems = container.querySelectorAll(".blank-item");
              blankItems.forEach((blank) => {
                const answer = blank.querySelector(".blank-answer").value;
                blanks.push(answer);
              });
              questionData.blanks = blanks;
              break;
          }

          questions.push(questionData);
        });

        questionsDataInput.value = JSON.stringify(questions);
        quizForm.submit();
      }
    </script>

    <style>
      .tags-input-container {
        position: relative;
      }

      .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 8px;
      }

      .tag-item {
        display: inline-flex;
        align-items: center;
        background-color: rgba(255, 255, 255, 0.03);
        border: 1px solid var(--color-border);
        padding: 4px 8px;
        font-size: 0.8rem;
        color: var(--color-text-primary);
      }

      .remove-tag {
        margin-left: 6px;
        cursor: pointer;
        font-size: 1.1rem;
        opacity: 0.7;
        transition: opacity var(--transition-fast);
      }

      .remove-tag:hover {
        opacity: 1;
        color: var(--color-accent);
      }

      .tag-suggestions {
        margin-top: 12px;
      }

      .suggestion-label {
        font-size: 0.8rem;
        color: var(--color-text-secondary);
        margin-bottom: 6px;
      }

      .suggestions-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
      }

      .suggestion-tag {
        display: inline-block;
        padding: 2px 8px;
        background-color: rgba(255, 255, 255, 0.02);
        border: 1px solid var(--color-border);
        font-size: 0.8rem;
        color: var(--color-text-secondary);
        cursor: pointer;
        transition: all var(--transition-fast);
      }

      .suggestion-tag:hover {
        background-color: rgba(255, 255, 255, 0.05);
        border-color: var(--color-accent);
        color: var(--color-accent);
      }
    </style>
  </body>
</html>
