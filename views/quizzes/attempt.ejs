<%- include('../partials/header') %>

<div class="container mt-4">
  <div class="card mb-4">
    <div class="card-body">
      <h1 class="card-title"><%= quiz.title %></h1>
      <p class="card-text">
        <%= quiz.description || 'No description provided' %>
      </p>
      <div class="text-muted mb-3">
        <small>
          Created by <%= quiz.creator ? quiz.creator.username : 'Unknown' %> •
          <%= quiz.questions.length %> questions • <%= quiz.attempts %> attempts
        </small>
      </div>
    </div>
  </div>

  <form action="/quiz/<%= quiz._id %>/submit" method="POST" id="quizForm">
    <% quiz.questions.forEach((question, questionIndex) => { %>
    <div class="card mb-4 question-card">
      <div class="card-body">
        <h3 class="card-title">Question <%= questionIndex + 1 %></h3>
        <p class="card-text"><%= question.questionText %></p>

        <div class="question-options">
          <% if (question.questionType === 'multiple-choice') { %>
          <div class="form-group">
            <% question.options.forEach((option, optionIndex) => { %>
            <div class="clickable-option">
              <input
                class="form-check-input"
                type="checkbox"
                name="answers[<%= questionIndex %>]"
                value="<%= option._id %>"
                id="question<%= questionIndex %>_option<%= optionIndex %>"
              />
              <label
                for="question<%= questionIndex %>_option<%= optionIndex %>"
              >
                <%= option.optionText %>
              </label>
            </div>
            <% }); %>
          </div>
          <% } else if (question.questionType === 'true-false') { %>
          <div class="form-group">
            <% question.options.forEach((option, optionIndex) => { %>
            <div class="clickable-option">
              <input
                type="radio"
                name="answers[<%= questionIndex %>]"
                value="<%= option._id %>"
                id="question<%= questionIndex %>_option<%= optionIndex %>"
                required
              />
              <label
                for="question<%= questionIndex %>_option<%= optionIndex %>"
              >
                <%= option.optionText %>
              </label>
            </div>
            <% }); %>
          </div>
          <% } else if (question.questionType === 'short-answer') { %>
          <div class="form-group">
            <input
              type="text"
              class="form-control"
              name="answers[<%= questionIndex %>]"
              placeholder="Your answer"
              required
            />
          </div>
          <% } else if (question.questionType === 'matching') { %>
          <div class="form-group matching-question">
            <% question.options.forEach((option, optionIndex) => { %>
            <div class="matching-row">
              <div class="matching-item"><%= option.optionText %></div>
              <div class="matching-selector">
                <select
                  class="form-control"
                  name="answers[<%= questionIndex %>]"
                  required
                >
                  <option value="">-- Select match --</option>
                  <% question.options.forEach((matchOption, matchIndex) => { %>
                  <option
                    value="<%= option._id %>:::<%= matchOption.matchTo %>"
                  >
                    <%= matchOption.matchTo %>
                  </option>
                  <% }); %>
                </select>
              </div>
            </div>
            <% }); %>
          </div>
          <% } else if (question.questionType === 'ordering') { %>
          <div class="form-group ordering-question">
            <div class="ordering-list">
              <% const shuffledOptions = [...question.options].sort(() =>
              Math.random() - 0.5); %> <% shuffledOptions.forEach((option,
              optionIndex) => { %>
              <div
                class="ordering-item"
                draggable="true"
                data-id="<%= option._id %>"
              >
                <div class="ordering-number"><%= optionIndex + 1 %></div>
                <div class="ordering-text"><%= option.optionText %></div>
                <input
                  type="hidden"
                  name="answers[<%= questionIndex %>]"
                  value="<%= option._id %>"
                />
              </div>
              <% }); %>
            </div>
            <div class="ordering-instruction">
              <small>Drag items to arrange in the correct order</small>
            </div>
          </div>
          <% } else if (question.questionType === 'fill-in-blanks') { %>
          <div class="form-group fill-in-blanks-question">
            <% let blanksText = question.questionText;
            question.blankAnswers.forEach((_, index) => { const blankKey =
            `{blank${index+1}}`; blanksText = blanksText.replace( blankKey,
            `<input
              type="text"
              class="form-control blank-input"
              name="answers[${questionIndex}]"
              placeholder="blank ${index+1}"
              required
            />` ); }); %>
            <div class="blanks-text"><%- blanksText %></div>
          </div>
          <% } %>
        </div>

        <div class="text-muted mt-2">
          <small>Points: <%= question.points %></small>
        </div>
      </div>
    </div>
    <% }); %>

    <div class="form-group text-center mb-5">
      <button type="submit" class="btn btn-primary btn-lg">
        Submit Answers
      </button>
      <a href="/quiz/<%= quiz._id %>" class="btn btn-secondary">Cancel</a>
    </div>
  </form>
</div>

<style>
  .quiz-option {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 8px;
    background-color: var(--color-border);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const clickableOptions = document.querySelectorAll(".clickable-option");

    clickableOptions.forEach((option) => {
      option.addEventListener("click", function (e) {
        if (e.target.tagName !== "INPUT" && e.target.tagName !== "LABEL") {
          // Find closest input element
          const input = this.querySelector("input");

          if (!input) return;

          // Toggle input state
          if (input.type === "checkbox") {
            input.checked = !input.checked;
          } else if (input.type === "radio") {
            input.checked = true;
          }

          // Visual feedback for the user
          if (input.checked) {
            this.classList.add("selected-option");
          } else {
            this.classList.remove("selected-option");
          }

          // Trigger change event
          const event = new Event("change", { bubbles: true });
          input.dispatchEvent(event);
        }
      });
    });

    const orderingItems = document.querySelectorAll(".ordering-item");
    orderingItems.forEach((item) => {
      item.addEventListener("dragstart", handleDragStart);
      item.addEventListener("dragover", handleDragOver);
      item.addEventListener("dragenter", handleDragEnter);
      item.addEventListener("dragleave", handleDragLeave);
      item.addEventListener("drop", handleDrop);
      item.addEventListener("dragend", handleDragEnd);
    });

    const hotspots = document.querySelectorAll(".clickable-hotspot");
    hotspots.forEach((hotspot) => {
      hotspot.addEventListener("click", function () {
        const checkbox = this.querySelector('input[type="checkbox"]');
        checkbox.checked = !checkbox.checked;

        if (checkbox.checked) {
          this.classList.add("selected");
        } else {
          this.classList.remove("selected");
        }
      });
    });
  });

  let draggedItem = null;

  function handleDragStart(e) {
    draggedItem = this;
    this.style.opacity = "0.4";
    e.dataTransfer.effectAllowed = "move";
    e.dataTransfer.setData("text/plain", this.dataset.id);
  }

  function handleDragOver(e) {
    if (e.preventDefault) e.preventDefault();
    e.dataTransfer.dropEffect = "move";
    return false;
  }

  function handleDragEnter(e) {
    this.classList.add("over");
  }

  function handleDragLeave(e) {
    this.classList.remove("over");
  }

  function handleDrop(e) {
    if (e.stopPropagation) e.stopPropagation();

    if (draggedItem !== this) {
      const list = this.parentNode;
      const items = Array.from(list.children);
      const fromIndex = items.indexOf(draggedItem);
      const toIndex = items.indexOf(this);

      if (fromIndex < toIndex) {
        list.insertBefore(draggedItem, this.nextSibling);
      } else {
        list.insertBefore(draggedItem, this);
      }

      updateOrderingNumbers(list);
    }

    return false;
  }

  function handleDragEnd(e) {
    this.style.opacity = "1";

    document.querySelectorAll(".ordering-item").forEach((item) => {
      item.classList.remove("over");
    });
  }

  function updateOrderingNumbers(list) {
    const items = list.querySelectorAll(".ordering-item");
    items.forEach((item, index) => {
      item.querySelector(".ordering-number").textContent = index + 1;
    });
  }
</script>

<%- include('../partials/footer') %>
